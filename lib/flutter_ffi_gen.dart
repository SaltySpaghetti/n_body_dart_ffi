// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// FFI bindings
class FFINativeBinding {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FFINativeBinding(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FFINativeBinding.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// flutter pub run ffigen --config ffigen.yaml
  void init(
    int particles_amount,
    double canvas_width,
    double canvas_height,
    double min_mass,
    double max_mass,
  ) {
    return _init(
      particles_amount,
      canvas_width,
      canvas_height,
      min_mass,
      max_mass,
    );
  }

  late final _initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Float, ffi.Float, ffi.Float, ffi.Float)>>('init');
  late final _init =
      _initPtr.asFunction<void Function(int, double, double, double, double)>();

  void update_particles() {
    return _update_particles();
  }

  late final _update_particlesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('update_particles');
  late final _update_particles =
      _update_particlesPtr.asFunction<void Function()>();
}
